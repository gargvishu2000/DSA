 public static List<Integer> traverseBoundary(TreeNode root){
        // Write your code here.
        List<Integer> ans= new ArrayList<>();
        if(isLeaf(root)==false){
            ans.add(root.data);
        }
        leftBoundry(root, ans);
        leafNodes(root, ans);
        rightBoundry(root, ans);
        return ans;
    }
    public static void leftBoundry(TreeNode node,List<Integer> ll){
        TreeNode curr= node.left;
        while(curr!=null){
            if(isLeaf(curr)==false){
                ll.add(curr.data);
            }
            if(curr.left!=null){
                curr = curr.left;
            }else{
                curr = curr.right;
            }
        }
    }
    public static boolean isLeaf(TreeNode node){
        if(node.left==null && node.right==null){
            return true;
        }else return false;
    }

    public static void leafNodes(TreeNode node,List<Integer> ll){
        if(isLeaf(node)){
            ll.add(node.data);
            return;
        }
        if(node.left!=null){
            leafNodes(node.left,ll);
        }
        if(node.right!=null) leafNodes(node.right, ll);
    } 

    public static void rightBoundry(TreeNode node,List<Integer> ll){
        TreeNode curr = node.right;
        ArrayList<Integer> temp = new ArrayList<>();
        while(curr!=null){
            if(isLeaf(curr)==false) temp.add(curr.data);
            if(curr.right!=null) curr= curr.right;
            else curr= curr.left;
        }
        int i;
        // System.out.println(temp);
        for(i = temp.size()-1; i>=0;i--){
            ll.add(temp.get(i));
        }
    }
