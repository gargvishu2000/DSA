IDEA: Morris traversal is used because it takes the time complexity same as everyone other traversal but it takes O(1) sapce complexity,
others take O(n) spce complexity as a stack space of recursion.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        TreeNode curr=root;
        
        while(curr!=null){
            if(curr.left==null){
                list.add(curr.val);
                curr = curr.right;
            }else{
                TreeNode prev = curr.left;
                while(prev.right!=null && prev.right!=curr){
                    prev= prev.right;
                }
                //------- Out Of Loop -------
                if(prev.right==null){
                    // creating a thread;
                    prev.right=curr;
                    // For Pre-order list.add(curr.val);
                    curr = curr.left;
                }else{
                    prev.right=null;
                    list.add(curr.val);
                    curr = curr.right;
                }
            }
        }
        return list;
    }
}
